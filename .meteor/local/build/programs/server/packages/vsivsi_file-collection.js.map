{"version":3,"sources":["vsivsi:file-collection/src/gridFS.coffee","vsivsi:file-collection/src/server_shared.coffee","vsivsi:file-collection/src/gridFS_server.coffee","vsivsi:file-collection/src/resumable_server.coffee","vsivsi:file-collection/src/http_access_server.coffee"],"names":[],"mappings":"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","file":"/packages/vsivsi_file-collection.js","sourcesContent":["############################################################################\n#     Copyright (C) 2014-2015 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nshare.defaultChunkSize = 2*1024*1024 - 1024\nshare.defaultRoot = 'fs'\n\nshare.insert_func = (file = {}, chunkSize) ->\n   try\n      id = new Meteor.Collection.ObjectID(\"#{file._id}\")\n   catch\n      id = new Meteor.Collection.ObjectID()\n   subFile = {}\n   subFile._id = id\n   subFile.length = 0\n   subFile.md5 = 'd41d8cd98f00b204e9800998ecf8427e'\n   subFile.uploadDate = new Date()\n   subFile.chunkSize = chunkSize\n   subFile.filename = file.filename ? ''\n   subFile.metadata = file.metadata ? {}\n   subFile.aliases = file.aliases ? []\n   subFile.contentType = file.contentType ? 'application/octet-stream'\n   return subFile\n","############################################################################\n#     Copyright (C) 2014-2015 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n   through2 = Npm.require 'through2'\n\n   share.check_allow_deny = (type, userId, file, fields) ->\n\n      checkRules = (rules) ->\n         res = false\n         for func in rules[type] when not res\n            res = func(userId, file, fields)\n         return res\n\n      result = not checkRules(@denys) and checkRules(@allows)\n      return result\n\n   share.bind_env = (func) ->\n      if func?\n         return Meteor.bindEnvironment func, (err) -> throw err\n      else\n         return func\n\n   share.safeObjectID = (s) ->\n      if s?.match /^[0-9a-f]{24}$/i  # Validate that _id is a 12 byte hex string\n         new Mongo.ObjectID s\n      else\n         null\n\n   share.streamChunker = (size = share.defaultChunkSize) ->\n      makeFuncs = (size) ->\n         bufferList = [ new Buffer(0) ]\n         total = 0\n         flush = (cb) ->\n            outSize = if total > size then size else total\n            if outSize > 0\n               outputBuffer = Buffer.concat bufferList, outSize\n               this.push outputBuffer\n               total -= outSize\n            lastBuffer = bufferList.pop()\n            newBuffer = lastBuffer.slice(lastBuffer.length - total)\n            bufferList = [ newBuffer ]\n            if total < size\n               cb()\n            else\n               flush.bind(this) cb\n         transform = (chunk, enc, cb) ->\n            bufferList.push chunk\n            total += chunk.length\n            if total < size\n               cb()\n            else\n               flush.bind(this) cb\n         return [transform, flush]\n      return through2.apply this, makeFuncs(size)\n","############################################################################\n#     Copyright (C) 2014-2015 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n   mongodb = Npm.require 'mongodb'\n   grid = Npm.require 'gridfs-locking-stream'\n   gridLocks = Npm.require 'gridfs-locks'\n   fs = Npm.require 'fs'\n   path = Npm.require 'path'\n   dicer = Npm.require 'dicer'\n   express = Npm.require 'express'\n\n   class FileCollection extends Mongo.Collection\n\n      constructor: (@root = share.defaultRoot, options = {}) ->\n         unless @ instanceof FileCollection\n            return new FileCollection(@root, options)\n\n         unless @ instanceof Mongo.Collection\n            throw new Error 'The global definition of Mongo.Collection has changed since the file-collection package was loaded. Please ensure that any packages that redefine Mongo.Collection are loaded before file-collection.'\n\n         if typeof @root is 'object'\n            options = @root\n            @root = share.defaultRoot\n\n         @chunkSize = options.chunkSize ? share.defaultChunkSize\n\n         @db = Meteor.wrapAsync(mongodb.MongoClient.connect)(process.env.MONGO_URL,{})\n\n         @lockOptions =\n            timeOut: options.locks?.timeOut ? 360\n            lockExpiration: options.locks?.lockExpiration ? 90\n            pollingInterval: options.locks?.pollingInterval ? 5\n\n         @locks = gridLocks.LockCollection @db,\n            root: @root\n            timeOut: @lockOptions.timeOut\n            lockExpiration: @lockOptions.lockExpiration\n            pollingInterval: @lockOptions.pollingInterval\n\n         @gfs = new grid(@db, mongodb, @root)\n\n         @baseURL = options.baseURL ? \"/gridfs/#{@root}\"\n\n         # if there are HTTP options, setup the express HTTP access point(s)\n         if options.resumable or options.http\n            share.setupHttpAccess.bind(@)(options)\n\n         # Default client allow/deny permissions\n         @allows = { read: [], insert: [], write: [], remove: [] }\n         @denys = { read: [], insert: [], write: [], remove: [] }\n\n         # Call super's constructor\n         super @root + '.files', { idGeneration: 'MONGO' }\n\n         # Default indexes\n         if options.resumable\n            indexOptions = {}\n            if typeof options.resumableIndexName is 'string'\n               indexOptions.name = options.resumableIndexName\n            @._ensureIndex({\n                  'metadata._Resumable.resumableIdentifier': 1\n                  'metadata._Resumable.resumableChunkNumber': 1\n                  length: 1\n               }, indexOptions)\n\n         # Setup specific allow/deny rules for gridFS, and tie-in the application settings\n\n         FileCollection.__super__.allow.bind(@)\n            # Because allow rules are not guaranteed to run,\n            # all checking is done in the deny rules below\n            insert: (userId, file) => true\n            remove: (userId, file) => true\n\n         FileCollection.__super__.deny.bind(@)\n\n            insert: (userId, file) =>\n\n               # Make darn sure we're creating a valid gridFS .files document\n               check file,\n                  _id: Meteor.Collection.ObjectID\n                  length: Match.Where (x) =>\n                     check x, Match.Integer\n                     x is 0\n                  md5: Match.Where (x) =>\n                     check x, String\n                     x is 'd41d8cd98f00b204e9800998ecf8427e' # The md5 of an empty file\n                  uploadDate: Date\n                  chunkSize: Match.Where (x) =>\n                     check x, Match.Integer\n                     x is @chunkSize\n                  filename: String\n                  contentType: String\n                  aliases: [ String ]\n                  metadata: Object\n\n               # Enforce a uniform chunkSize\n               unless file.chunkSize is @chunkSize\n                  console.warn \"Invalid chunksize\"\n                  return true\n\n               # call application rules\n               if share.check_allow_deny.bind(@) 'insert', userId, file\n                  return false\n\n               return true\n\n            update: (userId, file, fields) =>\n               ## Cowboy updates are not currently allowed from the client. Too much to screw up.\n               ## For example, if you store file ownership info in a sub document under 'metadata'\n               ## it will be complicated to guard against that being changed if you allow other parts\n               ## of the metadata sub doc to be updated. Write specific Meteor methods instead to\n               ## allow reasonable changes to the \"metadata\" parts of the gridFS file record.\n               return true\n\n            remove: (userId, file) =>\n               ## Remove is now handled via the default method override below, so this should\n               ## Never be called.\n               return true\n\n         self = @ # Necessary in the method definition below\n\n         Meteor.server.method_handlers[\"#{@_prefix}remove\"] = (selector) ->\n            unless LocalCollection._selectorIsIdPerhapsAsObject(selector)\n               throw new Meteor.Error 403, \"Not permitted. Untrusted code may only remove documents by ID.\"\n\n            file = self.findOne selector\n            if file\n               if share.check_allow_deny.bind(self) 'remove', this.userId, file\n                  return self.remove file\n               else\n                  throw new Meteor.Error 403, \"Access denied\"\n            else\n               return 0\n\n      # Register application allow rules\n      allow: (allowOptions) ->\n         for type, func of allowOptions\n            unless type of @allows\n               throw new Error \"Unrecognized allow rule type '#{type}'.\"\n            unless typeof func is 'function'\n               throw new Error \"Allow rule #{type} must be a valid function.\"\n            @allows[type].push(func)\n\n      # Register application deny rules\n      deny: (denyOptions) ->\n         for type, func of denyOptions\n            unless type of @denys\n               throw new Error \"Unrecognized deny rule type '#{type}'.\"\n            unless typeof func is 'function'\n               throw new Error \"Deny rule #{type} must be a valid function.\"\n            @denys[type].push(func)\n\n      insert: (file = {}, callback = undefined) ->\n         file = share.insert_func file, @chunkSize\n         super file, callback\n\n      # Update is dangerous! The checks inside attempt to keep you out of\n      # trouble with gridFS. Clients can't update at all. Be careful!\n      # Only metadata, filename, aliases and contentType should ever be changed\n      # directly by a server.\n\n      update: (selector, modifier, options = {}, callback = undefined) ->\n         if not callback? and typeof options is 'function'\n            callback = options\n            options = {}\n\n         if options.upsert?\n            err = new Error \"Update does not support the upsert option\"\n            if callback?\n               return callback err\n            else\n               throw err\n\n         if reject_file_modifier(modifier) and not options.force\n            err = new Error \"Modifying gridFS read-only document elements is a very bad idea!\"\n            if callback?\n               return callback err\n            else\n               throw err\n         else\n            super selector, modifier, options, callback\n\n      upsert: (selector, modifier, options = {}, callback = undefined) ->\n         if not callback? and typeof options is 'function'\n            callback = options\n         err = new Error \"File Collections do not support 'upsert'\"\n         if callback?\n            callback err\n         else\n            throw err\n\n      upsertStream: (file, options = {}, callback = undefined) ->\n         if not callback? and typeof options is 'function'\n            callback = options\n            options = {}\n         callback = share.bind_env callback\n         cbCalled = false\n         mods = {}\n         mods.filename = file.filename if file.filename?\n         mods.aliases = file.aliases if file.aliases?\n         mods.contentType = file.contentType if file.contentType?\n         mods.metadata = file.metadata if file.metadata?\n\n         options.autoRenewLock ?= true\n\n         if options.mode is 'w+'\n            throw new Error \"The ability to append file data in upsertStream() was removed in version 1.0.0\"\n\n         # Make sure that we have an ID and it's valid\n         if file._id\n            found = @findOne {_id: file._id}\n\n         unless file._id and found\n            file._id = @insert mods\n         else if Object.keys(mods).length > 0\n            @update { _id: file._id }, { $set: mods }\n\n         writeStream = Meteor.wrapAsync(@gfs.createWriteStream.bind(@gfs))\n            root: @root\n            _id: mongodb.ObjectID(\"#{file._id}\")\n            mode: 'w'\n            timeOut: @lockOptions.timeOut\n            lockExpiration: @lockOptions.lockExpiration\n            pollingInterval: @lockOptions.pollingInterval\n\n         if writeStream\n\n            if options.autoRenewLock\n               writeStream.on 'expires-soon', () =>\n                  writeStream.renewLock (e, d) ->\n                     if e or not d\n                        console.warn \"Automatic Write Lock Renewal Failed: #{file._id}\", e\n\n            if callback?\n               writeStream.on 'close', (retFile) ->\n                  callback(null, retFile) if retFile\n               writeStream.on 'error', (err) ->\n                  callback(err)\n\n            return writeStream\n\n         return null\n\n      findOneStream: (selector, options = {}, callback = undefined) ->\n         if not callback? and typeof options is 'function'\n            callback = options\n            options = {}\n\n         callback = share.bind_env callback\n         opts = {}\n         opts.sort = options.sort if options.sort?\n         opts.skip = options.skip if options.skip?\n         file = @findOne selector, opts\n\n         if file\n            options.autoRenewLock ?= true\n\n            # Init the start and end range, default to full file or start/end as specified\n            range =\n               start: options.range?.start ? 0\n               end: options.range?.end ? file.length - 1\n\n            readStream = Meteor.wrapAsync(@gfs.createReadStream.bind(@gfs))\n               root: @root\n               _id: mongodb.ObjectID(\"#{file._id}\")\n               timeOut: @lockOptions.timeOut\n               lockExpiration: @lockOptions.lockExpiration\n               pollingInterval: @lockOptions.pollingInterval\n               range:\n                 startPos: range.start\n                 endPos: range.end\n\n            if readStream\n               if options.autoRenewLock\n                  readStream.on 'expires-soon', () =>\n                     readStream.renewLock (e, d) ->\n                        if e or not d\n                           console.warn \"Automatic Read Lock Renewal Failed: #{file._id}\", e\n\n               if callback?\n                  readStream.on 'close', () ->\n                     callback(null, file)\n                  readStream.on 'error', (err) ->\n                     callback(err)\n               return readStream\n\n         return null\n\n      remove: (selector, callback = undefined) ->\n         callback = share.bind_env callback\n         if selector?\n            ret = 0\n            @find(selector).forEach (file) =>\n               res = Meteor.wrapAsync(@gfs.remove.bind(@gfs))\n                  _id: mongodb.ObjectID(\"#{file._id}\")\n                  root: @root\n                  timeOut: @lockOptions.timeOut\n                  lockExpiration: @lockOptions.lockExpiration\n                  pollingInterval: @lockOptions.pollingInterval\n               ret += if res then 1 else 0\n            callback? and callback null, ret\n            return ret\n         else\n            err = new Error \"Remove with an empty selector is not supported\"\n            if callback?\n               callback err\n               return\n            else\n               throw err\n\n      importFile: (filePath, file, callback) ->\n         callback = share.bind_env callback\n         filePath = path.normalize filePath\n         file ?= {}\n         file.filename ?= path.basename filePath\n         readStream = fs.createReadStream filePath\n         writeStream = @upsertStream file\n         readStream.pipe(share.streamChunker(@chunkSize)).pipe(writeStream)\n            .on('close', share.bind_env((d) -> callback(null, d)))\n            .on('error', share.bind_env(callback))\n\n      exportFile: (selector, filePath, callback) ->\n         callback = share.bind_env callback\n         filePath = path.normalize filePath\n         readStream = @findOneStream selector\n         writeStream = fs.createWriteStream filePath\n         readStream.pipe(writeStream)\n            .on('finish', share.bind_env(callback))\n            .on('error', share.bind_env(callback))\n\n   reject_file_modifier = (modifier) ->\n\n      forbidden = Match.OneOf(\n         Match.ObjectIncluding({ _id:        Match.Any })\n         Match.ObjectIncluding({ length:     Match.Any })\n         Match.ObjectIncluding({ chunkSize:  Match.Any })\n         Match.ObjectIncluding({ md5:        Match.Any })\n         Match.ObjectIncluding({ uploadDate: Match.Any })\n      )\n\n      required = Match.OneOf(\n         Match.ObjectIncluding({ _id:         Match.Any })\n         Match.ObjectIncluding({ length:      Match.Any })\n         Match.ObjectIncluding({ chunkSize:   Match.Any })\n         Match.ObjectIncluding({ md5:         Match.Any })\n         Match.ObjectIncluding({ uploadDate:  Match.Any })\n         Match.ObjectIncluding({ metadata:    Match.Any })\n         Match.ObjectIncluding({ aliases:     Match.Any })\n         Match.ObjectIncluding({ filename:    Match.Any })\n         Match.ObjectIncluding({ contentType: Match.Any })\n      )\n\n      return Match.test modifier, Match.OneOf(\n         Match.ObjectIncluding({ $set: forbidden })\n         Match.ObjectIncluding({ $unset: required})\n         Match.ObjectIncluding({ $inc: forbidden})\n         Match.ObjectIncluding({ $mul: forbidden})\n         Match.ObjectIncluding({ $bit: forbidden})\n         Match.ObjectIncluding({ $min: forbidden})\n         Match.ObjectIncluding({ $max: forbidden})\n         Match.ObjectIncluding({ $rename: required})\n         Match.ObjectIncluding({ $currentDate: forbidden})\n      )\n","############################################################################\n#     Copyright (C) 2014-2015 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n   express = Npm.require 'express'\n   mongodb = Npm.require 'mongodb'\n   grid = Npm.require 'gridfs-locking-stream'\n   gridLocks = Npm.require 'gridfs-locks'\n   dicer = Npm.require 'dicer'\n   async = Npm.require 'async'\n\n   # This function checks to see if all of the parts of a Resumable.js uploaded file are now in the gridFS\n   # Collection. If so, it completes the file by moving all of the chunks to the correct file and cleans up\n\n   check_order = (file, callback) ->\n      fileId = mongodb.ObjectID(\"#{file.metadata._Resumable.resumableIdentifier}\")\n      lock = gridLocks.Lock(fileId, @locks, {}).obtainWriteLock()\n      lock.on 'locked', () =>\n\n         files = @db.collection \"#{@root}.files\"\n\n         cursor = files.find(\n            {\n               'metadata._Resumable.resumableIdentifier': file.metadata._Resumable.resumableIdentifier\n               length:\n                  $ne: 0\n            },\n            {\n               fields:\n                  length: 1\n                  metadata: 1\n               sort:\n                  'metadata._Resumable.resumableChunkNumber': 1\n            }\n         )\n\n         cursor.count (err, count) =>\n            if err\n               lock.releaseLock()\n               return callback err\n\n            unless count >= 1\n               cursor.close()\n               lock.releaseLock()\n               return callback()\n\n            unless count is file.metadata._Resumable.resumableTotalChunks\n               cursor.close()\n               lock.releaseLock()\n               return callback()\n\n            # Manipulate the chunks and files collections directly under write lock\n            chunks = @db.collection \"#{@root}.chunks\"\n\n            cursor.batchSize file.metadata._Resumable.resumableTotalChunks + 1\n\n            cursor.toArray (err, parts) =>\n\n               if err\n                  lock.releaseLock()\n                  return callback err\n\n               async.eachLimit parts, 5,\n                  (part, cb) =>\n                     if err\n                        console.error \"Error from cursor.next()\", err\n                        cb err\n                     return cb new Error \"Received null part\" unless part\n                     partId = mongodb.ObjectID(\"#{part._id}\")\n                     partlock = gridLocks.Lock(partId, @locks, {}).obtainWriteLock()\n                     partlock.on 'locked', () =>\n                        async.series [\n                              # Move the chunks to the correct file\n                              (cb) -> chunks.update { files_id: partId, n: 0 },\n                                 { $set: { files_id: fileId, n: part.metadata._Resumable.resumableChunkNumber - 1 }}\n                                 cb\n                              # Delete the temporary chunk file documents\n                              (cb) -> files.remove { _id: partId }, cb\n                           ],\n                           (err, res) =>\n                              return cb err if err\n                              unless part.metadata._Resumable.resumableChunkNumber is part.metadata._Resumable.resumableTotalChunks\n                                 partlock.removeLock()\n                                 cb()\n                              else\n                                 # check for a final hanging gridfs chunk\n                                 chunks.update { files_id: partId, n: 1 },\n                                    { $set: { files_id: fileId, n: part.metadata._Resumable.resumableChunkNumber }}\n                                    (err, res) ->\n                                       partlock.removeLock()\n                                       return cb err if err\n                                       cb()\n                     partlock.on 'timed-out', () -> cb new Error 'Partlock timed out!'\n                     partlock.on 'expired', () -> cb new Error 'Partlock expired!'\n                     partlock.on 'error', (err) ->\n                        console.error \"Error obtaining partlock #{part._id}\", err\n                        cb err\n                  (err) =>\n                     if err\n                        lock.releaseLock()\n                        return callback err\n                     # Build up the command for the md5 hash calculation\n                     md5Command =\n                       filemd5: fileId\n                       root: \"#{@root}\"\n                     # Send the command to calculate the md5 hash of the file\n                     @db.command md5Command, (err, results) ->\n                       if err\n                          lock.releaseLock()\n                          return callback err\n                       # Update the size and md5 to the file data\n                       files.update { _id: fileId }, { $set: { length: file.metadata._Resumable.resumableTotalSize, md5: results.md5 }},\n                          (err, res) =>\n                             lock.releaseLock()\n                             callback err\n\n      lock.on 'expires-soon', () ->\n         lock.renewLock().once 'renewed', (ld) ->\n            unless ld\n               console.warn \"Resumable upload lock renewal failed!\"\n      lock.on 'expired', () -> callback new Error \"File Lock expired\"\n      lock.on 'timed-out', () -> callback new Error \"File Lock timed out\"\n      lock.on 'error', (err) -> callback err\n\n   # Handle HTTP POST requests from Resumable.js\n\n   resumable_post_lookup = (params, query, multipart) ->\n      return { _id: share.safeObjectID(multipart?.params?.resumableIdentifier) }\n\n   resumable_post_handler = (req, res, next) ->\n\n      # This has to be a resumable POST\n      unless req.multipart?.params?.resumableIdentifier\n         console.error \"Missing resumable.js multipart information\"\n         res.writeHead(501, {'Content-Type':'text/plain'})\n         res.end()\n         return\n\n      resumable = req.multipart.params\n      resumable.resumableTotalSize = parseInt resumable.resumableTotalSize\n      resumable.resumableTotalChunks = parseInt resumable.resumableTotalChunks\n      resumable.resumableChunkNumber = parseInt resumable.resumableChunkNumber\n      resumable.resumableChunkSize = parseInt resumable.resumableChunkSize\n      resumable.resumableCurrentChunkSize = parseInt resumable.resumableCurrentChunkSize\n\n      # Sanity check the chunk sizes that are critical to reassembling the file from parts\n      unless ((req.gridFS.chunkSize is resumable.resumableChunkSize) and\n              (resumable.resumableCurrentChunkSize is resumable.resumableChunkSize) or\n              ((resumable.resumableChunkNumber is resumable.resumableTotalChunks) and\n               (resumable.resumableCurrentChunkSize < 2*resumable.resumableChunkSize)))\n\n         res.writeHead(501, {'Content-Type':'text/plain'})\n         res.end()\n         return\n\n      chunkQuery =\n         length: resumable.resumableCurrentChunkSize\n         'metadata._Resumable.resumableIdentifier': resumable.resumableIdentifier\n         'metadata._Resumable.resumableChunkNumber': resumable.resumableChunkNumber\n\n      # This is to handle duplicate chunk uploads in case of network weirdness\n      findResult = @findOne chunkQuery, { fields: { _id: 1 }}\n\n      if findResult\n         # Duplicate chunk... Don't rewrite it.\n         # console.warn \"Duplicate chunk detected: #{resumable.resumableChunkNumber}, #{resumable.resumableIdentifier}\"\n         res.writeHead(200, {'Content-Type':'text/plain'})\n         res.end()\n      else\n         # Everything looks good, so write this part\n         req.gridFS.metadata._Resumable = resumable\n         writeStream = @upsertStream\n            filename: \"_Resumable_#{resumable.resumableIdentifier}_#{resumable.resumableChunkNumber}_#{resumable.resumableTotalChunks}\"\n            metadata: req.gridFS.metadata\n\n         unless writeStream\n            res.writeHead(404, {'Content-Type':'text/plain'})\n            res.end()\n            return\n\n         req.multipart.fileStream.pipe(share.streamChunker(@chunkSize)).pipe(writeStream)\n            .on 'close', share.bind_env((retFile) =>\n               if retFile\n                  # Check to see if all of the parts are now available and can be reassembled\n                  check_order.bind(@)(req.gridFS, (err) ->\n                     if err\n                        console.error \"Error reassembling chunks of resumable.js upload\", err\n                        res.writeHead(500, {'Content-Type':'text/plain'})\n                     else\n                        res.writeHead(200, {'Content-Type':'text/plain'})\n                     res.end()\n                  )\n               else\n                  console.error \"Missing retFile on pipe close\"\n                  res.writeHead(500, {'Content-Type':'text/plain'})\n                  res.end()\n               )\n\n            .on 'error', share.bind_env((err) =>\n               console.error \"Piping Error!\", err\n               res.writeHead(500, {'Content-Type':'text/plain'})\n               res.end())\n\n   resumable_get_lookup = (params, query) ->\n      q = { _id: share.safeObjectID(query.resumableIdentifier) }\n      return q\n\n   # This handles Resumable.js \"test GET\" requests, that exist to determine if a part is already uploaded\n   resumable_get_handler = (req, res, next) ->\n      query = req.query\n      chunkQuery =\n         $or: [\n            {\n               _id: share.safeObjectID(query.resumableIdentifier)\n               length: query.resumableTotalSize\n            }\n            {\n               length: query.resumableCurrentChunkSize\n               'metadata._Resumable.resumableIdentifier': query.resumableIdentifier\n               'metadata._Resumable.resumableChunkNumber': query.resumableChunkNumber\n            }\n         ]\n\n      result = @findOne chunkQuery, { fields: { _id: 1 }}\n\n      if result\n         # Chunk is present\n         res.writeHead(200, {'Content-Type':'text/plain'})\n      else\n         # Chunk is missing\n         res.writeHead(204, {'Content-Type':'text/plain'})\n\n      res.end()\n\n   # Setup the GET and POST HTTP REST paths for Resumable.js in express\n   share.resumable_paths = [\n      {\n         method: 'post'\n         path: '/_resumable'\n         lookup: resumable_post_lookup\n         handler: resumable_post_handler\n      }\n      {\n         method: 'get'\n         path: '/_resumable'\n         lookup: resumable_get_lookup\n         handler: resumable_get_handler\n      }\n   ]\n","############################################################################\n#     Copyright (C) 2014-2015 by Vaughn Iverson\n#     fileCollection is free software released under the MIT/X11 license.\n#     See included LICENSE file for details.\n############################################################################\n\nif Meteor.isServer\n\n   express = Npm.require 'express'\n   cookieParser = Npm.require 'cookie-parser'\n   mongodb = Npm.require 'mongodb'\n   grid = Npm.require 'gridfs-locking-stream'\n   gridLocks = Npm.require 'gridfs-locks'\n   dicer = Npm.require 'dicer'\n\n   find_mime_boundary = (req) ->\n      RE_BOUNDARY = /^multipart\\/.+?(?:; boundary=(?:(?:\"(.+)\")|(?:([^\\s]+))))$/i\n      result = RE_BOUNDARY.exec req.headers['content-type']\n      result?[1] or result?[2]\n\n   # Fast MIME Multipart parsing of generic HTTP POST request bodies\n   dice_multipart = (req, res, next) ->\n\n      next = share.bind_env next\n\n      unless req.method is 'POST'\n         next()\n         return\n\n      responseSent = false\n      handleFailure = (msg, err = \"\", retCode = 500) ->\n         console.error \"#{msg} \\n\", err\n         unless responseSent\n            responseSent = true\n            res.writeHead retCode, {'Content-Type':'text/plain'}\n            res.end()\n\n      boundary = find_mime_boundary req\n\n      unless boundary\n         handleFailure \"No MIME multipart boundary found for dicer\"\n         return\n\n      params = {}\n      count = 0\n      fileStream = null\n      fileType = 'text/plain'\n      fileName = 'blob'\n\n      d = new dicer { boundary: boundary }\n\n      d.on 'part', (p) ->\n         p.on 'header', (header) ->\n            RE_FILE = /^form-data; name=\"file\"; filename=\"([^\"]+)\"/\n            RE_PARAM = /^form-data; name=\"([^\"]+)\"/\n            for k, v of header\n               if k is 'content-type'\n                  fileType = v\n               if k is 'content-disposition'\n                  if re = RE_FILE.exec(v)\n                     fileStream = p\n                     fileName = re[1]\n                  else if param = RE_PARAM.exec(v)?[1]\n                     data = ''\n                     count++\n                     p.on 'data', (d) ->\n                        data += d.toString()\n                     p.on 'end', () ->\n                        count--\n                        params[param] = data\n                        if count is 0 and fileStream\n                           req.multipart =\n                              fileStream: fileStream\n                              fileName: fileName\n                              fileType: fileType\n                              params: params\n                           responseSent = true\n                           next()\n                  else\n                     console.warn \"Dicer part\", v\n\n            if count is 0 and fileStream\n               req.multipart =\n                  fileStream: fileStream\n                  fileName: fileName\n                  fileType: fileType\n                  params: params\n               responseSent = true\n               next()\n\n         p.on 'error', (err) ->\n            handleFailure 'Error in Dicer while parsing multipart:', err\n\n      d.on 'error', (err) ->\n         handleFailure 'Error in Dicer while parsing parts:', err\n\n      d.on 'finish', () ->\n         unless fileStream\n            handleFailure \"Error in Dicer, no file found in POST\"\n\n      req.pipe(d)\n\n   # Handle a generic HTTP POST file upload\n\n   # This curl command should be properly handled by this code:\n   # % curl -X POST 'http://127.0.0.1:3000/gridfs/fs/38a14c8fef2d6cef53c70792' \\\n   #        -F 'file=@\"universe.png\";type=image/png' -H 'X-Auth-Token: zrtrotHrDzwA4nC5'\n\n   post = (req, res, next) ->\n      # Handle filename or filetype data when included\n      req.gridFS.contentType = req.multipart.fileType if req.multipart.fileType\n      req.gridFS.filename = req.multipart.fileName if req.multipart.fileName\n\n      # Write the file data.  No chunks here, this is the whole thing\n      stream = @upsertStream req.gridFS\n      if stream\n         req.multipart.fileStream.pipe(share.streamChunker(@chunkSize)).pipe(stream)\n            .on 'close', (retFile) ->\n               if retFile\n                  res.writeHead(200, {'Content-Type':'text/plain'})\n                  res.end()\n            .on 'error', (err) ->\n               res.writeHead(500, {'Content-Type':'text/plain'})\n               res.end()\n      else\n         res.writeHead(410, {'Content-Type':'text/plain'})\n         res.end()\n\n   # Handle a generic HTTP GET request\n   # This also handles HEAD requests\n   # If the request URL has a \"?download=true\" query, then a browser download response is triggered\n\n   get = (req, res, next) ->\n\n      # If range request in the header\n      if req.headers['range']\n        # Set status code to partial data\n        statusCode = 206\n\n        # Pick out the range required by the browser\n        parts = req.headers[\"range\"].replace(/bytes=/, \"\").split(\"-\")\n        start = parseInt(parts[0], 10)\n        end = (if parts[1] then parseInt(parts[1], 10) else req.gridFS.length - 1)\n\n        # Unable to handle range request - Send the valid range with status code 416\n        if (start < 0) or (end >= req.gridFS.length) or (start > end) or isNaN(start) or isNaN(end)\n          res.writeHead 416, { 'Content-Type':'text/plain', 'Content-Range': 'bytes ' + '*/' + req.gridFS.length }\n          res.end()\n          return\n\n        # Determine the chunk size\n        chunksize = (end - start) + 1\n\n        # Construct the range request header\n        headers =\n            'Content-Range': 'bytes ' + start + '-' + end + '/' + req.gridFS.length\n            'Accept-Ranges': 'bytes'\n            'Content-Type': req.gridFS.contentType\n            'Content-Length': chunksize\n            'Last-Modified': req.gridFS.uploadDate.toUTCString()\n\n        # Read the partial request from gridfs stream\n        stream = @findOneStream(\n          _id: req.gridFS._id\n        ,\n          range:\n            start: start\n            end: end\n        )\n\n      # Otherwise prepare to stream the whole file\n      else\n        # Set default status code\n        statusCode = 200\n\n        # Set default headers\n        headers =\n            'Content-type': req.gridFS.contentType\n            'Content-MD5': req.gridFS.md5\n            'Content-Length': req.gridFS.length\n            'Last-Modified': req.gridFS.uploadDate.toUTCString()\n\n        # Open file to stream\n        stream = @findOneStream { _id: req.gridFS._id }\n\n      # Trigger download in browser, optionally specify filename.\n      if (req.query.download and req.query.download.toLowerCase() == 'true') or req.query.filename\n        filename = encodeURIComponent(req.query.filename ? req.gridFS.filename)\n        headers['Content-Disposition'] = \"attachment; filename=\\\"#{filename}\\\"; filename*=UTF-8''#{filename}\"\n\n      # If specified in url query set cache to specified value, might want to add more options later.\n      if req.query.cache and not isNaN(parseInt(req.query.cache))\n        headers['Cache-Control'] = \"max-age=\" + parseInt(req.query.cache)+\", private\"\n\n      # HEADs don't have a body\n      if req.method is 'HEAD'\n        res.writeHead 204, headers\n        res.end()\n        return\n\n      # Stream file\n      if stream\n         res.writeHead statusCode, headers\n         stream.pipe(res)\n            .on 'close', () ->\n               res.end()\n            .on 'error', (err) ->\n               res.writeHead(500, {'Content-Type':'text/plain'})\n               res.end(err)\n      else\n         res.writeHead(410, {'Content-Type':'text/plain'})\n         res.end()\n\n   # Handle a generic HTTP PUT request\n\n   # This curl command should be properly handled by this code:\n   # % curl -X PUT 'http://127.0.0.1:3000/gridfs/fs/7868f3df8425ae68a572b334' \\\n   #        -T \"universe.png\" -H 'Content-Type: image/png' -H 'X-Auth-Token: tEPAwXbGwgfGiJL35'\n\n   put = (req, res, next) ->\n\n      # Handle content type if it's present\n      if req.headers['content-type']\n         req.gridFS.contentType = req.headers['content-type']\n\n      # Write the file\n      stream = @upsertStream req.gridFS\n      if stream\n         req.pipe(share.streamChunker(@chunkSize)).pipe(stream)\n            .on 'close', (retFile) ->\n               if retFile\n                  res.writeHead(200, {'Content-Type':'text/plain'})\n                  res.end()\n            .on 'error', (err) ->\n               res.writeHead(500, {'Content-Type':'text/plain'})\n               res.end(err)\n      else\n         res.writeHead(404, {'Content-Type':'text/plain'})\n         res.end(\"#{req.url} Not found!\")\n\n   # Handle a generic HTTP DELETE request\n\n   # This curl command should be properly handled by this code:\n   # % curl -X DELETE 'http://127.0.0.1:3000/gridfs/fs/7868f3df8425ae68a572b334' \\\n   #        -H 'X-Auth-Token: tEPAwXbGwgfGiJL35'\n\n   del = (req, res, next) ->\n\n      @remove req.gridFS\n      res.writeHead(204, {'Content-Type':'text/plain'})\n      res.end()\n\n   # Setup all of the application specified paths and file lookups in express\n   # Also performs allow/deny permission checks for POST/PUT/DELETE\n\n   build_access_point = (http) ->\n\n      # Loop over the app supplied http paths\n      for r in http\n\n         if r.method.toUpperCase() is 'POST'\n            @router.post r.path, dice_multipart\n\n         # Add an express middleware for each application REST path\n         @router[r.method] r.path, do (r) =>\n\n            (req, res, next) =>\n\n               # params and queries literally named \"_id\" get converted to ObjectIDs automatically\n               req.params._id = share.safeObjectID(req.params._id) if req.params?._id?\n               req.query._id = share.safeObjectID(req.query._id) if req.query?._id?\n\n               # Build the path lookup mongoDB query object for the gridFS files collection\n               lookup = r.lookup?.bind(@)(req.params or {}, req.query or {}, req.multipart)\n               unless lookup?\n                  # No lookup returned, so bailing\n                  res.writeHead(500, {'Content-Type':'text/plain'})\n                  res.end()\n                  return\n               else\n                  # Perform the collection query\n                  req.gridFS = @findOne lookup\n                  unless req.gridFS\n                     res.writeHead(404, {'Content-Type':'text/plain'})\n                     res.end()\n                     return\n\n                  # Make sure that the requested method is permitted for this file in the allow/deny rules\n                  switch req.method\n                     when 'HEAD', 'GET'\n                        unless share.check_allow_deny.bind(@) 'read', req.meteorUserId, req.gridFS\n                           res.writeHead(403, {'Content-Type':'text/plain'})\n                           res.end()\n                           return\n                     when 'POST', 'PUT'\n                        unless share.check_allow_deny.bind(@) 'write', req.meteorUserId, req.gridFS\n                           res.writeHead(403, {'Content-Type':'text/plain'})\n                           res.end()\n                           return\n                     when 'DELETE'\n                        unless share.check_allow_deny.bind(@) 'remove', req.meteorUserId, req.gridFS\n                           res.writeHead(403, {'Content-Type':'text/plain'})\n                           res.end()\n                           return\n                     else\n                        res.writeHead(500, {'Content-Type':'text/plain'})\n                        res.end()\n                        return\n\n                  next()\n\n      @router.route('/*')\n         .all (req, res, next) ->  # Make sure a file has been selected by some rule\n            unless req.gridFS\n               res.writeHead(404, {'Content-Type':'text/plain'})\n               res.end()\n               return\n            next()\n\n      # Loop over the app supplied http paths\n      for r in http when typeof r.handler is 'function'\n            # Add an express middleware for each custom request handler\n            @router[r.method] r.path, r.handler.bind(@)\n\n      # Add all of generic request handling methods to the express route\n      @router.route('/*')\n         .head(get.bind(@))   # Generic HTTP method handlers\n         .get(get.bind(@))\n         .put(put.bind(@))\n         .post(post.bind(@))\n         .delete(del.bind(@))\n         .all (req, res, next) ->   # Unkown methods are denied\n            res.writeHead(500, {'Content-Type':'text/plain'})\n            res.end()\n\n   # Performs a meteor userId lookup by hased access token\n\n   lookup_userId_by_token = (authToken) ->\n      userDoc = Meteor.users?.findOne\n         'services.resume.loginTokens':\n            $elemMatch:\n               hashedToken: Accounts?._hashLoginToken(authToken)\n      return userDoc?._id or null\n\n   # Express middleware to convert a Meteor access token provided in an HTTP request\n   # to a Meteor userId attached to the request object as req.meteorUserId\n\n   handle_auth = (req, res, next) ->\n      unless req.meteorUserId?\n         # Lookup userId if token is provided in HTTP heder\n         if req.headers?['x-auth-token']?\n            req.meteorUserId = lookup_userId_by_token req.headers['x-auth-token']\n         # Or as a URL query of the same name\n         else if req.cookies?['X-Auth-Token']?\n            req.meteorUserId = lookup_userId_by_token req.cookies['X-Auth-Token']\n         else\n            req.meteorUserId = null\n      next()\n\n   # Set up all of the middleware, including optional support for Resumable.js chunked uploads\n   share.setupHttpAccess = (options) ->\n      r = express.Router()\n      r.use express.query()   # Parse URL query strings\n      r.use cookieParser()    # Parse cookies\n      r.use handle_auth       # Turn x-auth-tokens into Meteor userIds\n      WebApp.rawConnectHandlers.use(@baseURL, share.bind_env(r))\n\n      # Set up support for resumable.js if requested\n      if options.resumable\n         options.http = share.resumable_paths.concat options.http\n\n      # Setup application HTTP REST interface\n      @router = express.Router()\n      build_access_point.bind(@)(options.http, @router)\n      WebApp.rawConnectHandlers.use(@baseURL, share.bind_env(@router))\n"]}