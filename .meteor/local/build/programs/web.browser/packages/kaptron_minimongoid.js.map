)]}'
{"version":3,"sources":["kaptron:minimongoid/lib/relation.coffee","kaptron:minimongoid/lib/has_many_relation.coffee","kaptron:minimongoid/lib/has_and_belongs_to_many_relation.coffee","kaptron:minimongoid/lib/minimongoid.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;oBAAA;;AAAA,IAAO;AACL;;AAAa;AACX;AAAA,IADY,sBAAO,8DACnB;AAAA,QAAC,MAAD,GAAS,KAAT;AAAA,IACA,IAAC,MAAD,GAAS,IADT;AAAA,IAEA,IAAC,SAAD,GAAY,EAFZ;AAAA,IAGA,IAAC,KAAI,CAAC,KAAN,CAAY,IAAZ,EAAe,IAAf,CAHA,CADW;EAAA,CAAb;;AAAA,EAMA,QAAC,OAAD,GAAM;AACJ;AAAA,IADK,sBAAO,8DACZ;WAAI;;;;OAAA,MAAE,MAAO,4BAAT,gBADA;EAAA,CANN;;AAAA,qBASA,UAAS;WACP,IAAC,OADM;EAAA,CATT;;AAAA,qBAYA,gBAAe;WACb,IAAC,OADY;EAAA,CAZf;;AAAA,qBAeA,WAAU,SAAC,QAAD;;MAAC,WAAW;KACpB;WAAA,IAAC,SAAD,GAAY,SADJ;EAAA,CAfV;;AAAA,qBAkBA,SAAQ,SAAC,IAAD;AACN,QAAC,cAAD,IAAC,YAAa,GAAd;WACA,IAAC,MAAK,CAAC,MAAP,CAAc,CAAC,CAAC,MAAF,CAAS,IAAC,SAAV,EAAoB,IAApB,CAAd,EAFM;EAAA,CAlBR;;kBAAA;;GADsB,MAAxB;;;;;;;;;;;;;;;;;;;ACAA;;oBAAA;;AAAA,IAAO;AACL;;AAAa;AACX;AAAA,IADY,sBAAO,4BAAa,mBAAI,8DACpC;AAAA,QAAC,KAAD,GAAQ,EAAR;AAAA,IACA,IAAC,KAAK,aAAN,GAAqB,EADrB;AAAA,IAEA,IAAC,YAAD,GAAe,WAFf;AAAA,IAGA,kDAAM,MAAO,4BAAb,CAHA,CADW;EAAA,CAAb;;AAAA,EAMA,eAAC,OAAD,GAAM;AACJ;AAAA,IADK,sBAAO,4BAAa,mBAAI,8DAC7B;WAAI;;;;OAAA,MAAE,QAAO,WAAP,EAAoB,EAAI,4BAA1B,gBADA;EAAA,CANN;;AAAA,EASA,eAAC,aAAD,GAAe,SAAC,QAAD,EAAW,WAAX,EAAwB,EAAxB;WACT;;;;OAAA,MAAE,SAAQ,CAAC,aAAT,IAA0B,WAA1B,EAAuC,EAAI,8BAAQ,CAAC,OAAT,IAA7C,gBADS;EAAA,CATf;;AAAA,4BAYA,SAAQ,SAAC,IAAD;WACN,4CAAM,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,IAAC,KAAhB,CAAN,EADM;EAAA,CAZR;;yBAAA;;GAD6B,IAAC,UAAhC;;;;;;;;;;;;;;;;;;;ACAA;;oBAAA;;AAAA,IAAO;AACL;;AAAa;AACX;AAAA,IADY,yBAAU,sBAAO,2BAAY,mCAAoB,mBAAI,8DACjE;AAAA,QAAC,SAAD,GAAY,QAAZ;AAAA,IACA,IAAC,mBAAD,GAAsB,kBADtB;AAAA,IAEA,IAAC,KAAD,GAAQ,EAFR;AAAA,IAGA,IAAC,KAAK,YAAN,GAAoB,CAAC,EAAD,CAHpB;AAAA,IAIA,8DAAM,MAAO,4BAAb,CAJA,CADW;EAAA,CAAb;;AAAA,EAOA,2BAAC,OAAD,GAAM;AACJ;AAAA,IADK,yBAAU,sBAAO,2BAAY,mCAAoB,mBAAI,8DAC1D;WAAI;;;;OAAA,MAAE,WAAU,KAAV,EAAiB,UAAjB,EAA6B,kBAA7B,EAAiD,EAAI,4BAAvD,gBADA;EAAA,CAPN;;AAAA,EAUA,2BAAC,aAAD,GAAe,SAAC,QAAD,EAAW,QAAX,EAAqB,UAArB,EAAiC,kBAAjC,EAAqD,EAArD;WACT;;;;OAAA,MAAE,WAAU,QAAQ,CAAC,aAAT,EAAV,EAAoC,UAApC,EAAgD,kBAAhD,EAAoE,EAAI,8BAAQ,CAAC,OAAT,IAA1E,gBADS;EAAA,CAVf;;AAAA,wCAaA,SAAQ,SAAC,IAAD;AACN;AAAA,UAAM,wDAAM,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,IAAC,KAAhB,CAAN,CAAN;AAAA,IACA,OAAO,EADP;AAEA,QAAG,IAAC,SAAS,KAAC,mBAAD,CAAoB,CAAC,MAA/B,KAAyC,CAA5C;AACE,UAAK,KAAC,mBAAD,CAAL,GAA4B,CAAC,GAAG,CAAC,EAAL,CAA5B;AAAA,MACA,IAAC,SAAQ,CAAC,MAAV,CAAiB,IAAjB,CADA,CADF;KAAA;AAIE,UAAC,SAAQ,CAAC,IAAV,CAAe,IAAf,EAJF;KAFA;WAOA,IARM;EAAA,CAbR;;qCAAA;;GADyC,IAAC,UAA5C;;;;;;;;;;;;;;;;;;;ACAA;EAAA;;AAAA,SAAS,IAAT;;AAAA,IAEO;AAEL,6BAAI,MAAJ;;AAAA,wBACA,SAAQ,KADR;;AAKa,uBAAC,IAAD,EAAY,MAAZ;;MAAC,OAAO;KACnB;;MADuB,SAAS;KAChC;AAAA,QAAG,IAAI,CAAC,GAAR;AACE,UAAG,IAAC,YAAW,CAAC,UAAhB;AACE,YAAC,GAAD,GAAM,IAAI,CAAC,GAAG,CAAC,IAAf,CADF;OAAA;AAGE,YAAC,GAAD,GAAM,IAAI,CAAC,GAAX,CAHF;OAAA;AAAA,MAIA,IAAC,IAAD,GAAO,IAAC,GAJR,CADF;KAAA;AAAA,IAMA,IAAC,sBAAD,CAAuB,IAAvB,EAA6B,MAA7B,CANA,CADW;EAAA,CALb;;AAAA,wBAgBA,wBAAuB,SAAC,IAAD,EAAY,MAAZ;AAErB;;MAFsB,OAAO;KAE7B;;MAFiC,SAAS;KAE1C;AAAA;AAAA;uBAAA;AAEE,mBAAa,KAAE,EAAC,CAAC,WAAF,CAAc,KAAK,CAAC,IAApB,EAAF,GAA6B,MAA1C;AAAA,MACA,IAAE,iBAAF,IAAE,eAAgB,GADlB,CAFF;AAAA;AAKA;AAAA;8BAAA;AACE,mBAAE,WAAW,CAAC,UAAd,cAAwB,GAAxB,CADF;AAAA,KALA;AAQA,QAAG,IAAC,YAAW,CAAC,WAAb,IAA6B,MAAhC;AACE,UAAE,KAAC,YAAW,CAAC,WAAb,CAAF,GAA8B,MAA9B,CADF;KARA;AAaA;yBAAA;AACE,UAAY,IAAI,CAAC,KAAL,CAAW,MAAX,CAAZ;AAAA;OAAA;AACA,UAAG,IAAI,CAAC,KAAL,CAAW,MAAX,KAAuB,CAAC,iBAAiB,MAAM,CAAC,UAAU,CAAC,QAApC,CAA1B;AACE,YAAE,MAAF,GAAU,KAAK,CAAC,IAAhB,CADF;OAAA,MAEK,IAAG,CAAC,cAAc,CAAC,CAAC,SAAF,CAAY,IAAC,YAAW,CAAC,WAAzB,EAAsC;AAAA,QAAC,MAAM,IAAP;OAAtC,CAAf,CAAH;AAGH,qBAAa,WAAW,CAAC,UAAZ,IAA0B,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,WAAF,CAAc,IAAd,CAAX,CAAvC;AAAA,QACA,IAAE,MAAF,GAAU,MAAO,YAAW,CAAC,QAAnB,CAA4B,KAA5B,EAAmC,IAAnC,CADV,CAHG;OAAA;AAMH,YAAE,MAAF,GAAU,KAAV,CANG;OAJP;AAAA,KAbA;AA0BA;AAAA;wBAAA;AACE,UAAiB,WAAS,MAAT,KAAkB,WAAnC;AAAA,YAAE,MAAF,GAAU,GAAV;OADF;AAAA,KA1BA;AAAA,IA8BA,OAAO,IA9BP;AAiCA;AAAA;6BAAA;AACE,iBAAW,UAAU,CAAC,IAAtB;AAAA,MACA,aAAa,UAAU,CAAC,UAAX,IAAyB,MAAE,QAAF,GAAY,KAAZ,CADtC;AAAA,MAGA,aAAa,UAAU,CAAC,UAAX,IAAyB,CAAC,CAAC,QAAF,CAAW,QAAX,CAHtC;AAAA,MAKA,IAAE,UAAF,GAAgB,UAAC,QAAD,EAAW,UAAX,EAAuB,UAAvB;eACd,SAAC,OAAD;;YAAC,UAAU;WAET;AAAA,cAAG,MAAO,YAAP,IAAuB,IAAK,YAA/B;AACE,mBAAO,MAAO,YAAW,CAAC,IAAnB,CAAwB,IAAK,YAA7B,EAA0C,OAA1C,CAAP,CADF;WAAA;AAGE,mBAAO,KAAP,CAHF;WAFF;QAAA,EADc;MAAA,EAAF,CAAG,QAAH,EAAa,UAAb,EAAyB,UAAzB,CALd,CADF;AAAA,KAjCA;AAiDA;AAAA;2BAAA;AACE,iBAAW,QAAQ,CAAC,IAApB;AAAA,MACA,WAAW,EADX;AAEA,YAAO,cAAc,QAAQ,CAAC,WAAvB,CAAP;AAEE,sBAAc,KAAE,EAAC,CAAC,WAAF,CAAc,IAAC,YAAW,CAAC,IAAb,EAAmB,CAAC,WAApB,EAAd,EAAF,GAAoD,KAAlE,CAFF;OAFA;AAKA,UAAG,IAAC,YAAW,CAAC,UAAhB;AACE,gBAAS,aAAT,GAA4B,UAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,IAAC,GAA5B,CAA5B,CADF;OAAA;AAGE,gBAAS,aAAT,GAAwB,IAAC,GAAzB,CAHF;OALA;AAAA,MAUA,aAAa,QAAQ,CAAC,UAAT,IAAuB,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,WAAF,CAAc,QAAd,CAAX,CAVpC;AAAA,MAWA,IAAE,UAAF,GAAgB,UAAC,QAAD,EAAW,QAAX,EAAqB,UAArB;eACd,SAAC,YAAD,EAAoB,OAApB;;YAAC,eAAe;WAEd;;YAFkB,UAAU;WAE5B;AAAA,yBAAe,CAAC,CAAC,MAAF,CAAS,YAAT,EAAuB,QAAvB,CAAf;AAEA,cAAG,MAAO,YAAV;mBACE,eAAe,CAAC,YAAhB,CAA6B,MAAO,YAAW,CAAC,KAAnB,CAAyB,YAAzB,EAAuC,OAAvC,CAA7B,EAA8E,WAA9E,EAA2F,IAAC,GAA5F,EADF;WAJF;QAAA,EADc;MAAA,EAAF,CAAG,QAAH,EAAa,QAAb,EAAuB,UAAvB,CAXd,CADF;AAAA,KAjDA;AAuEA;AAAA;SAAA;wBAAA;AACE,iBAAW,KAAK,CAAC,IAAjB;AAAA,MACA,aAAa,KAAE,EAAC,CAAC,WAAF,CAAc,QAAd,EAAF,GAA2B,MADxC;AAAA,MAGA,aAAa,KAAK,CAAC,UAAN,IAAoB,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,WAAF,CAAc,QAAd,CAAX,CAHjC;AAAA,oBAIA,IAAE,UAAF,GAAgB,UAAC,QAAD,EAAW,UAAX,EAAuB,UAAvB;eACd,SAAC,YAAD,EAAoB,OAApB;AACE;;YADD,eAAe;WACd;;YADkB,UAAU;WAC5B;AAAA,qBAAY;AAAA,YAAC,KAAK;AAAA,cAAC,KAAK,IAAK,YAAX;aAAN;WAAZ;AAAA,UAEA,eAAe,CAAC,CAAC,MAAF,CAAS,YAAT,EAAuB,QAAvB,CAFf;AAAA,UAGA,WAAW,MAAO,YAAW,CAAC,IAAnB,EAHX;AAAA,UAIA,SAAS,SAAC,CAAD;AACP,mBAAO,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,WAAF,CAAc,CAAC,CAAC,IAAhB,CAAX,CAAvB;mBACA,MAAO,MAAP,KAAgB,IAAI,CAAC,YAFd;UAAA,CAJT;AAAA,UAOA,UAAU,CAAC,CAAC,IAAF,CAAO,QAAQ,CAAC,WAAW,CAAC,uBAA5B,EAAqD,MAArD,EAA6D,IAA7D,CAPV;AAAA,UAQA,qBAAqB,KAAE,EAAC,CAAC,WAAF,CAAc,OAAO,CAAC,IAAtB,EAAF,GAA+B,MARpD;AASA,cAAG,MAAO,YAAP,IAAuB,IAAK,YAA5B,IAA4C,IAAK,YAAW,CAAC,MAAhE;AACE,uBAAW,MAAO,YAAW,CAAC,KAAnB,CAAyB,YAAzB,EAAuC,OAAvC,CAAX;AACA,mBAAO,2BAA2B,CAAC,YAA5B,CAAyC,QAAzC,EAAmD,IAAnD,EAAsD,kBAAtD,EAA0E,UAA1E,EAAsF,IAAC,GAAvF,CAAP,CAFF;WAAA;AAIE,mBAAO,2BAA2B,CAAC,KAAD,CAA3B,CAAgC,IAAhC,EAAmC,MAAO,YAA1C,EAAuD,kBAAvD,EAA2E,UAA3E,EAAuF,IAAC,GAAxF,CAAP,CAJF;WAVF;QAAA,EADc;MAAA,EAAF,CAAG,QAAH,EAAa,UAAb,EAAyB,UAAzB,EAJd,CADF;AAAA;oBAzEqB;EAAA,CAhBvB;;AAAA,wBAsHA,IAAG,SAAC,QAAD;WACD,IAAC,QAAD,CAAS,QAAT,EADC;EAAA,CAtHH;;AAAA,wBA0HA,UAAS,SAAC,QAAD,EAAW,OAAX;AAGP;;MAHkB,UAAU;KAG5B;AAAA;AAAA;4BAAA;AACE,UAAG,aAAY,UAAU,CAAC,IAA1B;AACE,qBAAa,KAAE,UAAU,CAAC,IAAb,GAAmB,KAAhC;AAEA,uBAAiB,CAAC,UAAlB;AACE,oBAAU,CAAC,UAAX,GAAwB,CAAC,CAAC,QAAF,CAAW,UAAU,CAAC,IAAtB,CAAxB,CADF;SAFA;AAKA,YAAG,IAAE,YAAL;AACE,iBAAO,MAAO,WAAU,CAAC,UAAX,CAAsB,CAAC,IAA9B,CAAmC,IAAE,YAArC,EAAkD,OAAlD,CAAP,CADF;SAAA;AAGE,iBAAO,KAAP,CAHF;SANF;OADF;AAAA;AAYA;AAAA;2BAAA;AACE,UAAG,aAAY,QAAQ,CAAC,IAAxB;AACE,mBAAW,EAAX;AACA,cAAO,cAAc,QAAQ,CAAC,WAAvB,CAAP;AAEE,wBAAc,KAAE,EAAC,CAAC,WAAF,CAAc,IAAC,YAAW,CAAC,IAAb,EAAmB,CAAC,WAApB,EAAd,EAAF,GAAoD,KAAlE,CAFF;SADA;AAIA,YAAG,IAAC,YAAW,CAAC,UAAhB;AACE,kBAAS,aAAT,GAA4B,UAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,IAAC,GAA5B,CAA5B,CADF;SAAA;AAGE,kBAAS,aAAT,GAAwB,IAAC,GAAzB,CAHF;SAJA;AASA,qBAAe,CAAC,UAAhB;AACE,kBAAQ,CAAC,UAAT,GAAsB,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,WAAF,CAAc,QAAQ,CAAC,IAAvB,CAAX,CAAtB,CADF;SATA;AAYA,eAAO,MAAO,SAAQ,CAAC,UAAT,CAAoB,CAAC,KAA5B,CAAkC,QAAlC,EAA4C,OAA5C,CAAP,CAbF;OADF;AAAA,KAZA;AA4BA;AAAA;wBAAA;AACE,UAAG,aAAY,KAAK,CAAC,IAArB;AACE,qBAAa,KAAE,EAAC,CAAC,WAAF,CAAc,KAAK,CAAC,IAApB,EAAF,GAA6B,MAA1C;AAEA,kBAAY,CAAC,UAAb;AACE,eAAK,CAAC,UAAN,GAAmB,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,WAAF,CAAc,KAAK,CAAC,IAApB,CAAX,CAAnB,CADF;SAFA;AAIA,YAAG,IAAE,YAAF,IAAkB,IAAE,YAAW,CAAC,MAAnC;AACE,iBAAO,MAAO,MAAK,CAAC,UAAN,CAAiB,CAAC,KAAzB,CAA+B;AAAA,YAAC,KAAK;AAAA,cAAC,KAAK,IAAE,YAAR;aAAN;WAA/B,EAA4D,OAA5D,CAAP,CADF;SAAA;AAGE,iBAAO,EAAP,CAHF;SALF;OADF;AAAA,KA5BA;WAuCA,OAAO,CAAC,IAAR,CAAc,YAAQ,QAAR,GAAkB,sBAAlB,GAAuC,KAAC,YAAW,CAAC,IAAb,GAAvC,GAA4D,GAA1E,EA1CO;EAAA,CA1HT;;AAAA,wBA6KA,QAAO,SAAC,KAAD,EAAQ,OAAR;AACL;AAAA,QAAC,YAAD,IAAC,UAAW,GAAZ;AAAA,IACA,MAAM,EADN;AAAA,IAEA,GAAI,OAAJ,GAAa,OAFb;WAGA,IAAC,OAAM,CAAC,IAAR,CAAa,GAAb,EAJK;EAAA,CA7KP;;AAAA,wBAmLA,UAAS,SAAC,IAAD;;MAAC,OAAO;KACf;AAAA,QAAC,SAAD;WACA,KAAK,QAFE;EAAA,CAnLT;;AAAA,wBAwLA,WAAU;WAER,KAFQ;EAAA,CAxLV;;AAAA,wBA4LA,OAAM,SAAC,IAAD;AAEJ;;MAFK,OAAO;KAEZ;AAAA,QAAC,OAAD,GAAU,KAAV;AAEA;kBAAA;AACE,UAAE,GAAF,GAAO,CAAP,CADF;AAAA,KAFA;AAKA,QAAyC,IAAC,YAAW,CAAC,WAAtD;AAAA,aAAO,IAAC,YAAW,CAAC,WAAb,CAAyB,IAAzB,CAAP;KALA;AAOA,QAAY,KAAK,QAAD,EAAhB;AAAA,aAAO,IAAP;KAPA;AAWA,QAAG,eAAH;AACE,UAAC,YAAW,CAAC,WAAW,CAAC,MAAzB,CAAgC,IAAC,GAAjC,EAAqC;AAAA,QAAE,MAAM,IAAR;OAArC,EADF;KAAA;AAGE,UAAC,GAAD,GAAM,IAAC,IAAD,GAAO,IAAC,YAAW,CAAC,WAAW,CAAC,MAAzB,CAAgC,IAAhC,CAAb,CAHF;KAXA;AAgBA,QAAG,IAAC,YAAW,CAAC,UAAhB;AACE,UAAC,YAAW,CAAC,UAAb,CAAwB,IAAxB,EADF;KAhBA;AAmBA,WAAO,IAAP,CArBI;EAAA,CA5LN;;AAAA,wBAmNA,SAAQ,SAAC,IAAD;WACN,IAAC,KAAD,CAAM,IAAN,EADM;EAAA,CAnNR;;AAAA,wBAuNA,OAAM,SAAC,IAAD;WAOJ,IAAC,YAAW,CAAC,WAAW,CAAC,MAAzB,CAAgC,IAAC,GAAjC,EAAqC;AAAA,MAAC,WAAW,IAAZ;KAArC,EAPI;EAAA,CAvNN;;AAAA,wBAiOA,OAAM,SAAC,IAAD;WACJ,IAAC,YAAW,CAAC,WAAW,CAAC,MAAzB,CAAgC,IAAC,GAAjC,EAAqC;AAAA,MAAC,OAAO,IAAR;KAArC,EADI;EAAA,CAjON;;AAAA,wBAoOA,MAAK,SAAC,KAAD;AACH;AAAA,YAAQ,EAAR;AAAA,IACA,KAAM,OAAN,GAAe,EADf;WAEA,IAAC,YAAW,CAAC,WAAW,CAAC,MAAzB,CAAgC,IAAC,GAAjC,EAAqC;AAAA,MAAC,QAAQ,KAAT;KAArC,EAHG;EAAA,CApOL;;AAAA,wBAyOA,UAAS;AACP,QAAG,eAAH;AACE,UAAC,YAAW,CAAC,WAAW,CAAC,MAAzB,CAAgC,IAAC,GAAjC;aACA,IAAC,GAAD,GAAM,IAAC,IAAD,GAAO,KAFf;KADO;EAAA,CAzOT;;AAAA,wBA8OA,SAAQ;AACN,QAAG,eAAH;aACE,IAAC,YAAW,CAAC,IAAb,CAAkB,IAAC,GAAnB,EADF;KADM;EAAA,CA9OR;;AAAA,EAmPA,WAAC,WAAD,GAAa,KAnPb;;AAAA,EAoPA,WAAC,YAAD,GAAc,MApPd;;AAAA,EAqPA,WAAC,MAAD,GAAQ,MArPR;;AAAA,EAsPA,WAAC,OAAD,GAAS,KAtPT;;AAAA,EAwPA,WAAC,SAAD,GAAW,EAxPX;;AAAA,EA0PA,WAAC,WAAD,GAAa,EA1Pb;;AAAA,EA2PA,WAAC,SAAD,GAAW,EA3PX;;AAAA,EA4PA,WAAC,wBAAD,GAA0B,EA5P1B;;AAAA,EA8PA,WAAC,YAAD,GAAc,IA9Pd;;AAAA,EA+PA,WAAC,YAAD,GAAc,EA/Pd;;AAAA,EAwQA,WAAC,KAAD,GAAO,SAAC,IAAD,EAAO,MAAP;;MAAO,SAAS;KACrB;WAAI,SAAE,IAAF,EAAQ,MAAR,EADC;EAAA,CAxQP;;AAAA,EA2QA,WAAC,KAAD,GAAO;AACL,QAAG,IAAC,YAAJ;aAAqB,IAAC,YAAW,CAAC,MAAlC;KAAA;aAA6C,WAA7C;KADK;EAAA,CA3QP;;AAAA,EA8QA,WAAC,OAAD,GAAS,SAAC,IAAD;AACP;AAAA,QAAI,CAAC,cAAL,IAAI,CAAC,YAAkB,WAAvB;AACA,QAA+B,IAAC,cAAhC;AAAA,aAAO,IAAC,cAAD,CAAe,IAAf,CAAP;KADA;AAAA,IAEA,MAAM,IAAC,KAAD,CAAM,IAAN,CAFN;AAAA,IAGA,MAAM,GAAG,CAAC,IAAJ,CAAS,IAAT,CAHN;AAAA,IAIA,GAAG,CAAC,qBAAJ,CAA0B,IAA1B,CAJA;AAKA,QAAG,OAAQ,IAAC,aAAZ;aACE,IAAC,aAAD,CAAc,GAAd,EADF;KAAA;aAGE,IAHF;KANO;EAAA,CA9QT;;AAAA,EA0RA,WAAC,MAAD,GAAQ,SAAC,QAAD,EAAgB,OAAhB;AACN;;MADO,WAAW;KAClB;;MADsB,UAAU;KAChC;AAAA,WAAO,IAAP;AACA,QAAG,IAAC,OAAJ;AACE,aAAO,CAAC,IAAR,CAAa,gBAAb;AAAA,MACA,OAAO,CAAC,IAAR,CAAc,OAAG,EAAC,CAAC,WAAF,CAAc,CAAC,CAAC,QAAF,CAAW,IAAC,KAAD,EAAX,CAAd,EAAH,GAAqC,SAArC,GAA6C,KAAI,CAAC,SAAL,CAAe,QAAf,EAA7C,GAAuE,CAAG,EAAK,CAAC,OAAF,CAAU,OAAV,CAAP,GAA8B,MAAI,IAAI,CAAC,SAAL,CAAe,OAAf,CAAlC,GAA8D,EAA9D,CAAvE,GAAyI,GAAvJ,CADA,CADF;KADA;AAAA,IAIA,SAAS,IAAC,KAAD,CAAM,QAAN,EAAgB,OAAhB,CAAwB,CAAC,KAAzB,EAJT;AAAA,IAKA,SAAS,QAAQ,CAAC,KAAD,CAAR,iBAAa,KAAM,8BAAnB,CALT;AAAA,IAMA,MAAM,CAAC,QAAP,CAAgB,QAAhB,CANA;AAOA,QAA6C,IAAC,OAAD,IAAY,MAAzD;AAAA,aAAO,CAAC,IAAR,CAAc,eAAW,MAAM,CAAC,MAAhC;KAPA;WAQA,OATM;EAAA,CA1RR;;AAAA,EAqSA,WAAC,MAAD,GAAQ,SAAC,QAAD,EAAgB,OAAhB;AACN;;MADO,WAAW;KAClB;;MADsB,UAAU;KAChC;AAAA,QAAG,IAAC,OAAJ;AACE,aAAO,CAAC,IAAR,CAAa,gBAAb;AAAA,MACA,OAAO,CAAC,IAAR,CAAc,OAAG,EAAC,CAAC,WAAF,CAAc,CAAC,CAAC,QAAF,CAAW,IAAC,KAAD,EAAX,CAAd,EAAH,GAAqC,SAArC,GAA6C,KAAI,CAAC,SAAL,CAAe,QAAf,EAA7C,GAAuE,CAAG,EAAK,CAAC,OAAF,CAAU,OAAV,CAAP,GAA8B,MAAI,IAAI,CAAC,SAAL,CAAe,OAAf,CAAlC,GAA8D,EAA9D,CAAvE,GAAyI,GAAvJ,CADA,CADF;KAAA;AAGA,QAAG,MAAM,IAAC,YAAW,CAAC,OAAb,CAAqB,QAArB,EAA+B,OAA/B,CAAT;aACE,IAAC,KAAD,CAAM,GAAN,EADF;KAJM;EAAA,CArSR;;AAAA,EA6SA,WAAC,KAAD,GAAO,SAAC,QAAD,EAAgB,OAAhB;AACL;;MADM,WAAW;KACjB;;MADqB,UAAU;KAC/B;AAAA,WAAO,CAAC,IAAR,GAAe;AAAA,iBAAW,EAAX;KAAf;AACA,QAAG,MAAM,IAAC,YAAW,CAAC,OAAb,CAAqB,QAArB,EAA+B,OAA/B,CAAT;aACE,IAAC,KAAD,CAAM,GAAN,EADF;KAFK;EAAA,CA7SP;;AAAA,EAkTA,WAAC,IAAD,GAAM,SAAC,OAAD;;MAAC,UAAU;KACf;WAAA,IAAC,MAAD,CAAO,EAAP,EAAW,OAAX,EADI;EAAA,CAlTN;;AAAA,EAsTA,WAAC,KAAD,GAAO,SAAC,QAAD,EAAgB,OAAhB;AACL;;MADM,WAAW;KACjB;;MADqB,UAAU;KAC/B;AAAA,WAAO,IAAP;AAEA,gBAAc,CAAC,SAAf;AACE,aAAO,CAAC,SAAR,GAAoB,SAAC,GAAD;eAAS,IAAI,CAAC,IAAL,CAAU,GAAV,EAAT;MAAA,CAApB,CADF;KAFA;AAMA,QAAO,oBAAmB,QAA1B;AACE,UAAG,IAAC,WAAJ;AACE,mBAAe,UAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,QAA3B,CAAf,CADF;OAAA;aAEA,IAAC,MAAD,CAAO;AAAA,QAAC,KAAK,QAAN;OAAP,EAAwB,OAAxB,EAHF;KAAA,MAIK,IAAG,oBAAoB,MAAM,CAAC,UAAU,CAAC,QAAzC;aACH,IAAC,MAAD,CAAO;AAAA,QAAC,KAAK,QAAN;OAAP,EAAwB,OAAxB,EADG;KAAA;AAIH,UAAG,IAAC,WAAJ;AACE,YAAG,YAAa,QAAQ,CAAC,GAAzB;AACE,cAAG,eAAe,CAAC,GAAhB,KAAuB,QAA1B;AACE,oBAAQ,CAAC,GAAT,GAAmB,UAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,QAAQ,CAAC,GAApC,CAAnB,CADF;WAAA,MAEK,IAAG,QAAQ,CAAC,GAAI,OAAhB;AAEH,oBAAQ,CAAC,GAAI,OAAb,GAAsB,CAAC,CAAC,aAAF,CAAgB,QAAQ,CAAC,GAAI,OAA7B,CAAtB,CAFG;WAHP;SAAA;AAMA,YAAG,YAAa,QAAQ,CAAC,IAAzB;AACE,kBAAQ,CAAC,IAAT,GAAgB,CAAC,CAAC,GAAF,CAAM,QAAQ,CAAC,IAAf,EAAqB,SAAC,EAAD;mBAAY,UAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,EAA3B,EAAZ;UAAA,CAArB,CAAhB,CADF;SAPF;OAAA;aAUA,IAAC,YAAW,CAAC,IAAb,CAAkB,QAAlB,EAA4B,OAA5B,EAdG;KAXA;EAAA,CAtTP;;AAAA,EAkVA,WAAC,MAAD,GAAQ,SAAC,QAAD,EAAgB,OAAhB;;MAAC,WAAW;KAClB;;MADsB,UAAU;KAChC;WAAA,IAAC,KAAD,CAAM,QAAN,EAAgB,OAAhB,CAAwB,CAAC,KAAzB,GADM;EAAA,CAlVR;;AAAA,EAqVA,WAAC,WAAD,GAAa,SAAC,QAAD;;MAAC,WAAW;KACvB;WAAA,IAAC,YAAW,CAAC,MAAb,CAAoB,QAApB,EADW;EAAA,CArVb;;AAAA,EA2VA,WAAC,SAAD,GAAW,SAAC,MAAD,EAAS,MAAT;AACT;;MADkB,SAAS;KAC3B;AAAA,WAAO,IAAP;AAAA,IACA,SAAS,MAAM,CAAC,GAAP,CAAW,SAAC,CAAD;aAAO,IAAI,CAAC,IAAL,CAAU,CAAV,EAAa,MAAb,EAAP;IAAA,CAAX,CADT;WAEA,QAAQ,CAAC,KAAD,CAAR,iBAAa,KAAM,8BAAnB,EAHS;EAAA,CA3VX;;qBAAA;;IAJF;;AAAA,CAuWC,CAAC,WAAF,GAAgB,SAAC,CAAD;SACd,IAAI,CAAC,CAAC,OAAF,CAAU,IAAV,EAAgB,EAAhB,EADU;AAAA,CAvWhB","file":"/packages/kaptron:minimongoid.js","sourcesContent":["class @Relation extends Array\n  constructor: (klass, args...) ->\n    @klass = klass\n    @elems = args\n    @selector = {}\n    @push.apply(@, args)\n\n  @new: (klass, args...) ->\n    new @(klass, args...)\n\n  toArray: () ->\n    @elems\n\n  relationClass: ->\n    @klass\n\n  setQuery: (selector = {}) ->\n    @selector = selector\n\n  create: (attr) ->\n    @selector ||= {}\n    @klass.create(_.extend(@selector, attr))\n","class @HasManyRelation extends @Relation\n  constructor: (klass, foreign_key, id, args...) ->\n    @link = {}\n    @link[foreign_key] = id\n    @foreign_key = foreign_key\n    super klass, args...\n\n  @new: (klass, foreign_key, id, args...) ->\n    new @(klass, foreign_key, id, args...)\n\n  @fromRelation: (relation, foreign_key, id) ->\n    new @(relation.relationClass(), foreign_key, id, relation.toArray()...)\n\n  create: (attr) ->\n    super _.extend(attr, @link)\n","class @HasAndBelongsToManyRelation extends @Relation\n  constructor: (instance, klass, identifier, inverse_identifier, id, args...) ->\n    @instance = instance\n    @inverse_identifier = inverse_identifier\n    @link = {}\n    @link[identifier] = [id]\n    super klass, args...\n\n  @new: (instance, klass, identifier, inverse_identifier, id, args...) ->\n    new @(instance, klass, identifier, inverse_identifier, id, args...)\n\n  @fromRelation: (relation, instance, identifier, inverse_identifier, id) ->\n    new @(instance, relation.relationClass(), identifier, inverse_identifier, id, relation.toArray()...)\n\n  create: (attr) ->\n    obj = super _.extend(attr, @link)\n    attr = {}\n    if @instance[@inverse_identifier].length == 0\n      attr[@inverse_identifier] = [obj.id]\n      @instance.update attr\n    else\n      @instance.push(attr)\n    obj\n    \n","global = @\n\nclass @Minimongoid\n  # --- instance vars\n  id: undefined\n  errors: false\n  # attr: {}\n\n  # --- instance methods \n  constructor: (attr = {}, parent = null) ->\n    if attr._id\n      if @constructor._object_id\n        @id = attr._id._str\n      else\n        @id = attr._id\n      @_id = @id\n    @initAttrsAndRelations(attr, parent)\n\n  # this function sets up all of the attributes to be stored on the model as well as\n  # setting up the relation methods \n  initAttrsAndRelations: (attr = {}, parent = null) ->\n    # initialize relation arrays to be an empty array, if they don't exist \n    for habtm in @constructor.has_and_belongs_to_many\n      # e.g. matchup.game_ids = []\n      identifier = \"#{_.singularize(habtm.name)}_ids\"\n      @[identifier] ||= []\n    # initialize relation arrays to be an empty array, if they don't exist \n    for embeds_many in @constructor.embeds_many\n      @[embeds_many.name] ||= []\n\n    if @constructor.embedded_in and parent\n      @[@constructor.embedded_in] = parent\n\n\n    # load in all the passed attrs \n    for name, value of attr\n      continue if name.match(/^_id/)\n      if name.match(/_id$/) and (value instanceof Meteor.Collection.ObjectID)\n        @[name] = value._str\n      else if (embeds_many = _.findWhere(@constructor.embeds_many, {name: name}))\n        # initialize a model with the appropriate attributes \n        # also pass \"self\" along as the parent model\n        class_name = embeds_many.class_name || _.classify(_.singularize(name))\n        @[name] = global[class_name].modelize(value, @)\n      else\n        @[name] = value\n\n    # load in defaults\n    for attr, val of @constructor.defaults\n      @[attr] = val if typeof @[attr] is 'undefined'\n\n\n    self = @\n\n    # set up belongs_to methods, e.g. recipe.user()\n    for belongs_to in @constructor.belongs_to\n      relation = belongs_to.name\n      identifier = belongs_to.identifier || \"#{relation}_id\"\n      # set up default class name, e.g. \"belongs_to: user\" ==> 'User'\n      class_name = belongs_to.class_name || _.titleize(relation)\n\n      @[relation] = do(relation, identifier, class_name) ->\n        (options = {}) ->\n          # if we have a relation_id \n          if global[class_name] and self[identifier]\n            return global[class_name].find self[identifier], options\n          else\n            return false\n\n\n    # set up has_many methods, e.g. user.recipes()\n    for has_many in @constructor.has_many\n      relation = has_many.name\n      selector = {}\n      unless foreign_key = has_many.foreign_key\n        # can't use @constructor.name in production because it's been minified to \"n\"\n        foreign_key = \"#{_.singularize(@constructor.to_s().toLowerCase())}_id\"\n      if @constructor._object_id\n        selector[foreign_key] = new Meteor.Collection.ObjectID @id\n      else\n        selector[foreign_key] = @id\n      # set up default class name, e.g. \"has_many: users\" ==> 'User'\n      class_name = has_many.class_name || _.titleize(_.singularize(relation))\n      @[relation] = do(relation, selector, class_name) ->\n        (mod_selector = {}, options = {}) ->\n          # first consider any passed in selector options\n          mod_selector = _.extend mod_selector, selector\n          # e.g. where {user_id: @id}\n          if global[class_name]\n            HasManyRelation.fromRelation(global[class_name].where(mod_selector, options), foreign_key, @id)\n\n\n    # set up HABTM methods, e.g. user.friends()\n    for habtm in @constructor.has_and_belongs_to_many\n      relation = habtm.name\n      identifier = \"#{_.singularize(relation)}_ids\"\n      # set up default class name, e.g. \"habtm: users\" ==> 'User'\n      class_name = habtm.class_name || _.titleize(_.singularize(relation))\n      @[relation] = do(relation, identifier, class_name) ->\n        (mod_selector = {}, options = {}) ->\n          selector =  {_id: {$in: self[identifier]}}\n          # first consider any passed in selector options\n          mod_selector = _.extend mod_selector, selector\n          instance = global[class_name].init()\n          filter = (r) ->\n            name = r.class_name || _.titleize(_.singularize(r.name))\n            global[name] == this.constructor\n          inverse = _.find instance.constructor.has_and_belongs_to_many, filter, @\n          inverse_identifier = \"#{_.singularize(inverse.name)}_ids\"\n          if global[class_name] and self[identifier] and self[identifier].length\n            relation = global[class_name].where mod_selector, options\n            return HasAndBelongsToManyRelation.fromRelation(relation, @, inverse_identifier, identifier, @id)\n          else\n            return HasAndBelongsToManyRelation.new(@, global[class_name], inverse_identifier, identifier, @id)\n\n\n\n  # /--------------------\n  # DEPRECATED: r() and related() methods \n  # --------------------\n\n  # alias to @related\n  r: (relation) ->\n    @related(relation)\n\n  # look up related models \n  related: (relation, options = {}) ->\n    # self = @\n    # is it a belongs_to? \n    for belongs_to in @constructor.belongs_to\n      if relation == belongs_to.name\n        identifier = \"#{belongs_to.name}_id\"\n        # set up default class name, e.g. \"belongs_to: user\" ==> 'User'\n        unless belongs_to.class_name\n          belongs_to.class_name = _.titleize belongs_to.name\n        # if we have a relation_id \n        if @[identifier]\n          return global[belongs_to.class_name].find @[identifier], options\n        else\n          return false\n    # is it a has many?\n    for has_many in @constructor.has_many\n      if relation == has_many.name\n        selector = {}\n        unless foreign_key = has_many.foreign_key\n          # can't use @constructor.name in production because it's been minified to \"n\"\n          foreign_key = \"#{_.singularize(@constructor.to_s().toLowerCase())}_id\"\n        if @constructor._object_id\n          selector[foreign_key] = new Meteor.Collection.ObjectID @id\n        else\n          selector[foreign_key] = @id\n        # set up default class name, e.g. \"has_many: users\" ==> 'User'\n        unless has_many.class_name\n          has_many.class_name = _.titleize _.singularize(has_many.name)\n        # e.g. where {user_id: @id}\n        return global[has_many.class_name].where selector, options\n    # is it a has many? (same as HABTM)\n    for habtm in @constructor.has_and_belongs_to_many\n      if relation == habtm.name\n        identifier = \"#{_.singularize(habtm.name)}_ids\"\n        # set up default class name, e.g. \"habtm: users\" ==> 'User'\n        unless habtm.class_name\n          habtm.class_name = _.titleize _.singularize(habtm.name)\n        if @[identifier] and @[identifier].length\n          return global[habtm.class_name].where {_id: {$in: @[identifier]}}, options\n        else\n          return []\n    # if we get here, means method not found\n    console.warn \"Method #{relation} does not exist for #{@constructor.to_s()}.\"\n\n\n  # isPersisted: -> @id?\n\n  # -------------------\n  # --------------------/\n\n\n  error: (field, message) ->\n    @errors ||= []\n    obj = {}\n    obj[field] = message\n    @errors.push obj\n\n  isValid: (attr = {}) -> \n    @validate()\n    not @errors\n\n  # nothing by default\n  validate: ->\n    # if blah then @errors.blah = 'no, bad!' else @errors = false\n    true\n\n  save: (attr = {}) ->\n    # reset errors before running isValid()\n    @errors = false\n\n    for k,v of attr\n      @[k] = v\n\n    attr = @constructor.before_save(attr) if @constructor.before_save\n\n    return @ if not @isValid()\n\n    # attr['_type'] = @constructor._type if @constructor._type?\n    \n    if @id?\n      @constructor._collection.update @id, { $set: attr }\n    else\n      @id = @_id = @constructor._collection.insert attr\n    \n    if @constructor.after_save\n      @constructor.after_save(@)\n\n    return @\n\n  update: (attr) ->\n    @save(attr)\n\n  # push to mongo array field\n  push: (data) -> \n    # TODO: should maybe do something like this; but it should know if we're pushing an embedded model and instantiate it...\n    # for name, value of data \n    #   # update locally \n    #   @[name].push value\n\n    # addToSet to ensure uniqueness -- can't think of if/when we WOULDN'T want that??\n    @constructor._collection.update @id, {$addToSet: data}\n\n  # pull from mongo array field\n  pull: (data) ->\n    @constructor._collection.update @id, {$pull: data}\n\n  del: (field) ->\n    unset = {}\n    unset[field] = \"\"\n    @constructor._collection.update @id, {$unset: unset}\n\n  destroy: ->\n    if @id?\n      @constructor._collection.remove @id\n      @id = @_id = null\n\n  reload: ->\n    if @id?\n      @constructor.find(@id)\n\n  # --- class variables\n  @_object_id: false\n  @_collection: undefined\n  @_type: undefined\n  @_debug: false\n\n  @defaults: []\n\n  @belongs_to: []\n  @has_many: []\n  @has_and_belongs_to_many: []\n\n  @embedded_in: null\n  @embeds_many: []\n\n  # @after_save: null\n  # @before_save: null\n  # @before_create: null\n  # @after_create: null\n\n\n  # --- class methods\n  @init: (attr, parent = null) ->\n    new @(attr, parent)\n\n  @to_s: ->\n    if @_collection then @_collection._name else \"embedded\"\n\n  @create: (attr) ->\n    attr.createdAt ||= new Date()\n    attr = @before_create(attr) if @before_create\n    doc = @init(attr)\n    doc = doc.save(attr)\n    doc.initAttrsAndRelations(attr)\n    if doc and @after_create\n      @after_create(doc)\n    else\n      doc\n\n  # find + modelize\n  @where: (selector = {}, options = {}) ->\n    self = @\n    if @_debug\n      console.info \" --- WHERE ---\"\n      console.info \"  #{_.singularize _.classify @to_s()}.where(#{JSON.stringify selector}#{if not _.isEmpty options then ','+JSON.stringify options else ''})\"\n    result = @find(selector, options).fetch()\n    result = Relation.new self, result...\n    result.setQuery selector\n    console.info \"  > found #{result.length}\" if @_debug and result\n    result\n\n  @first: (selector = {}, options = {}) ->\n    if @_debug\n      console.info \" --- FIRST ---\"\n      console.info \"  #{_.singularize _.classify @to_s()}.first(#{JSON.stringify selector}#{if not _.isEmpty options then ','+JSON.stringify options else ''})\"\n    if doc = @_collection.findOne(selector, options)\n      @init doc\n\n  # kind of a silly method, just does a findOne with reverse sort on createdAt\n  @last: (selector = {}, options = {}) ->\n    options.sort = createdAt: -1\n    if doc = @_collection.findOne(selector, options)\n      @init doc\n\n  @all: (options = {}) ->\n    @where({}, options)\n\n  # this doesn't perform a fetch, just generates a collection cursor\n  @find: (selector = {}, options = {}) ->\n    self = @\n    # ***Important!*** Transform all docs in the collection to be an instance of our model\n    unless options.transform\n      options.transform = (doc) -> self.init(doc)\n\n    # unless you just pass an id, in which case it *does* fetch the first\n    unless typeof selector == 'object'\n      if @_object_id\n        selector = new Meteor.Collection.ObjectID selector\n      @first {_id: selector}, options\n    else if selector instanceof Meteor.Collection.ObjectID\n      @first {_id: selector}, options\n    else\n      # handle objectIDs -- these would come from an external database entry e.g. Rails\n      if @_object_id\n        if selector and selector._id\n          if typeof selector._id is 'string'\n            selector._id = new Meteor.Collection.ObjectID selector._id\n          else if selector._id['$in']\n            # _.map(game_ids, function(x) { return new Meteor.Collection.ObjectID(x) })\n            selector._id['$in'] = _.map_object_id selector._id['$in']\n        if selector and selector._ids \n          selector._ids = _.map(selector._ids, (id) -> new Meteor.Collection.ObjectID id)\n\n      @_collection.find selector, options\n\n\n  @count: (selector = {}, options = {}) ->\n    @find(selector, options).count()\n\n  @destroyAll: (selector = {}) ->\n    @_collection.remove(selector)\n\n\n  # run a model init on all items in the collection \n  # -- somewhat deprecated -- used to be used in @where function, which is replaced by the transform inside of @find\n  @modelize: (cursor, parent = null) ->\n    self = @\n    models = cursor.map (i) -> self.init(i, parent)\n    Relation.new self, models...\n\n\n# for some reason underscore.inflection stopped working with Meteor 0.6.5. \n# so for now we just use this simple singularize method instead of including the library\n_.singularize = (s) ->\n  s = s.replace /s$/, \"\"\n"]}