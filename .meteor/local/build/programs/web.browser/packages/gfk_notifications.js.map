)]}'
{"version":3,"file":"/packages/gfk:notifications.js","sources":["gfk:notifications/notifications.html","gfk:notifications/notifications.js","gfk:notifications/notification.html","gfk:notifications/notification.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,sC;AACA,gF;AACA,kB;AACA,kB;AACA,4B;AACA,yC;AACA,wD;AACA,iB;AACA,oG;AACA,a;AACA,I;;;;;;;;;;;;;;;;;;;ACXA,8B;AACA,qF;;AAEA,+B;AACA,Q;AACA,2C;AACA,mB;AACA,O;AACA,sC;AACA,4B;AACA,6C;;AAEA,mE;AACA,8C;AACA,2B;AACA,K;;AAEA,Q;AACA,0B;AACA,gD;AACA,kD;AACA,2E;AACA,uF;AACA,uH;AACA,O;AACA,kF;AACA,gC;AACA,iD;;AAEA,8B;AACA,mC;AACA,uC;AACA,yC;AACA,2D;;AAEA,8B;AACA,0E;AACA,S;;AAEA,gC;AACA,M;;AAEA,Q;AACA,gD;AACA,gD;AACA,kD;AACA,2E;AACA,uH;AACA,mB;AACA,O;AACA,wE;AACA,gC;AACA,wC;AACA,6D;AACA,M;;AAEA,Q;AACA,kD;AACA,gD;AACA,kD;AACA,2E;AACA,uH;AACA,mB;AACA,O;AACA,uE;AACA,gC;AACA,0C;AACA,6D;AACA,M;;AAEA,Q;AACA,+C;AACA,gD;AACA,kD;AACA,2E;AACA,uH;AACA,mB;AACA,O;AACA,uE;AACA,gC;AACA,uC;AACA,6D;AACA,M;;AAEA,Q;AACA,kD;AACA,gD;AACA,kD;AACA,2E;AACA,uH;AACA,mB;AACA,O;AACA,0E;AACA,gC;AACA,0C;AACA,6D;AACA,M;;AAEA,Q;AACA,4D;AACA,gD;AACA,e;AACA,O;AACA,uE;AACA,6C;AACA,M;;AAEA,Q;AACA,iF;AACA,iF;AACA,e;AACA,O;AACA,4D;AACA,yE;AACA,+D;;AAEA,qD;;AAEA,mC;AACA,4C;AACA,6D;AACA,mE;AACA,0D;AACA,iB;AACA,a;;AAEA,6C;AACA,sC;AACA,a;AACA,S;AACA,M;;AAEA,Q;AACA,yG;AACA,kD;AACA,e;AACA,O;AACA,qE;AACA,yE;;AAEA,kH;AACA,sF;;AAEA,qC;AACA,M;;AAEA,Q;AACA,8D;AACA,e;AACA,O;AACA,0D;AACA,wB;AACA,+D;;AAEA,wB;AACA,uE;AACA,oD;AACA,0B;AACA,uD;AACA,gB;AACA,kD;AACA,S;AACA,M;;AAEA,Q;AACA,+D;AACA,uC;AACA,8D;AACA,O;AACA,gF;AACA,8B;;AAEA,mD;AACA,4C;AACA,sD;AACA,a;AACA,W;;AAEA,iC;AACA,M;;AAEA,Q;AACA,sD;AACA,sB;AACA,O;AACA,0D;AACA,4D;;AAEA,wC;AACA,2D;AACA,kD;AACA,kC;AACA,S;AACA,M;;AAEA,Q;AACA,4D;AACA,8E;AACA,O;AACA,qC;AACA,mB;AACA,qB;AACA,kB;AACA,oB;AACA,M;;AAEA,Q;AACA,4D;AACA,sE;AACA,O;AACA,8C;AACA,iD;AACA,4B;AACA,kB;AACA,M;;AAEA,4C;AACA,4B;AACA,a;AACA,c;AACA,iB;AACA,oB;AACA,e;AACA,I;AACA,qB;AACA,G;;AAEA,yB;AACA,K;;AAEA,kC;;AAEA,gC;AACA,+B;AACA,kE;AACA,K;AACA,G;;AAEA,+C;AACA,+B;AACA,8C;AACA,yC;AACA,U;AACA,+C;AACA,mC;AACA,4D;AACA,0B;AACA,mC;AACA,8D;AACA,mB;AACA,U;AACA,wC;AACA,yC;AACA,+D;AACA,kD;AACA,uC;AACA,qC;AACA,oB;AACA,S;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;;;ACnQA,qC;AACA,8E;AACA,kB;AACA,kB;AACA,yB;AACA,qI;AACA,4D;AACA,qB;AACA,2B;AACA,W;AACA,K;AACA,8B;AACA,oB;AACA,4B;AACA,oD;AACA,gC;AACA,sB;AACA,4B;AACA,sD;AACA,2C;AACA,wD;AACA,iB;AACA,8C;AACA,4B;AACA,qB;AACA,sB;AACA,c;AACA,yB;AACA,iB;AACA,I;;;;;;;;;;;;;;;;;;;AC9BA,a;;AAEA,8C;AACA,uD;AACA,8C;AACA,E;;AAEA,+B;AACA,mD;AACA,oE;AACA,K;AACA,G;;AAEA,gC;AACA,0B;AACA,8D;AACA,2C;AACA,S;AACA,K;AACA,E","sourcesContent":["\nTemplate.__checkName(\"notifications\");\nTemplate[\"notifications\"] = new Template(\"Template.notifications\", (function() {\n  var view = this;\n  return HTML.UL({\n    \"class\": \"notifications\"\n  }, \"\\n       \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"notifications\"));\n  }, function() {\n    return [ \"\\n           \", Spacebars.include(view.lookupTemplate(\"notification\")), \"\\n       \" ];\n  }), \"\\n\t\");\n}));\n","/*global Notifications:true */\n// 'use strict'; reinstate when https://github.com/meteor/meteor/issues/2437 is fixed\n\nvar constructor = (function() {\n    /***\n     * Creates an instance of Notifications\n     * @constructor\n     */\n    function Notifications(settings) {\n\t\tsettings = settings || {};\n\t\t_.defaults(settings, this.defaultSettings);\n\n        this._notificationsCollection = new Mongo.Collection(null);\n        this._notificationTimeout = undefined;\n\t\tthis.settings = settings;\n    }\n\n    /***\n     * Adds a notification\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {String}  [options.type=defaultOptions.type] the type of the notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     */\n    Notifications.prototype.addNotification = function (title, message, options) {\n        options = options || {};\n        _.defaults(options, this.defaultOptions);\n\n        var notification = {};\n        notification.title = title;\n        notification.message = message;\n        notification.type = options.type;\n        notification.userCloseable = options.userCloseable;\n\n        if (options.timeout) {\n            notification.expires = new Date().getTime() + options.timeout;\n        }\n\n        this._add(notification);\n    };\n\n    /***\n     * Wraps addNotification, sets type to error\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @returns {*}\n     */\n    Notifications.prototype.error = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.ERROR;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Wraps addNotification, sets type to warning\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @returns {*}\n     */\n    Notifications.prototype.warn = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.WARNING;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Wraps addNotification, sets type to info\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @returns {*}\n     */\n    Notifications.prototype.info = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.INFO;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Wraps addNotification, sets type to success\n     * @param {String} title of the notification\n     * @param {String} message of the notification\n     * @param {Object}  [options={}] Options object to use for notification\n     * @param {Boolean} [options.userCloseable=defaultOptions.userCloseable] Whether the notification is user closeable\n     * @returns {*}\n     */\n    Notifications.prototype.success = function (title, message, options) {\n        options = options || {};\n        options.type = this.TYPES.SUCCESS;\n        return this.addNotification(title, message, options);\n    };\n\n    /***\n     * Returns the NotificationsCollection Meteor.Collection\n     * @returns {object} NotificationsCollection\n     * @private\n     */\n    Notifications.prototype._getNotificationsCollection = function () {\n        return this._notificationsCollection;\n    };\n\n    /***\n     * Does the actual add to the collection. And creates a Timeout if necessary.\n     * @param {object} notification the object to be inserted into the collection\n     * @private\n     */\n    Notifications.prototype._add = function (notification) {\n        var notificationsCollection = this._getNotificationsCollection();\n        var firstExpiration = this._getFirstExpiredTimestamp();\n\n        notificationsCollection.insert(notification);\n\n        if (notification.expires) {\n            if (this._notificationTimeout) {\n                if (firstExpiration > notification.expires) {\n                    Meteor.clearTimeout(this._notificationTimeout);\n                    this._notificationTimeout = undefined;\n                }\n            }\n\n            if (!this._notificationTimeout) {\n                this._createTimeout();\n            }\n        }\n    };\n\n    /***\n     * Returns the timestamp of the notification from the notificationsCollection that is first to expire\n     * @returns {string} first to expire timestamp\n     * @private\n     */\n    Notifications.prototype._getFirstExpiredTimestamp = function () {\n        var notificationsCollection = this._getNotificationsCollection();\n\n        var firstNotification = notificationsCollection.findOne({expires: {$gt: 0}}, {sort:[['expires', 'asc']]});\n        var firstExpiredTimestamp = firstNotification ? firstNotification.expires : 0;\n\n        return firstExpiredTimestamp;\n    };\n\n    /***\n     * creates a timeout for the first to expire notification.\n     * @private\n     */\n    Notifications.prototype._createTimeout = function () {\n        var self = this;\n        var firstExpiration = this._getFirstExpiredTimestamp();\n\n\t\tif (firstExpiration) {\n            this._notificationTimeout = Meteor.setTimeout(function () {\n\t\t\t\tself.remove({expires: {$lte: firstExpiration}});\n\t\t\t\tself._createTimeout();\n            }, firstExpiration - new Date().getTime());\n        } else {\n            this._notificationTimeout = undefined;\n        }\n    };\n\n    /***\n     * Gets the class containing the color for the notification\n     * @param {String} notificationType\n     * @returns {string} classname to use for the notification\n     */\n    Notifications.prototype.getNotificationClass = function (notificationType) {\n        var notificationClass;\n\n        _.each(this.TYPES,  function (value, key) {\n            if(value === notificationType) {\n                notificationClass = key.toLowerCase();\n            }\n        });\n\n        return notificationClass;\n    };\n\n    /***\n     * Removes the notifications matching the selector\n     * @param selector\n     */\n    Notifications.prototype.remove = function (selector) {\n        this._getNotificationsCollection().remove(selector);\n\n        if (this._notificationTimeout) {\n            Meteor.clearTimeout(this._notificationTimeout);\n            this._notificationTimeout = undefined;\n            this._createTimeout();\n        }\n    };\n\n    /***\n     * Stores constants for the different notification types\n     * @type {{ERROR: number, WARNING: number, INFO: number, SUCCESS: number}}\n     */\n    Notifications.prototype.TYPES = {\n        'ERROR': 1,\n        'WARNING': 2,\n        'INFO': 3,\n        'SUCCESS': 4\n    };\n\n    /***\n     * Object with the default options for the notifications\n     * @type {{type: number, userCloseable: boolean, timeout: number}}\n     */\n    Notifications.prototype.defaultOptions = {\n        type: Notifications.prototype.TYPES.INFO,\n        userCloseable: true,\n        timeout: 0\n    };\n\n\tNotifications.prototype.defaultSettings = {\n\t\thideAnimationProperties: {\n\t\t\theight: 0,\n\t\t\topacity: 0,\n\t\t\tpaddingTop: 0,\n\t\t\tpaddingBottom: 0,\n\t\t\tmarginTop: 0\n\t\t},\n\t\tanimationSpeed: 400\n\t};\n\n    return Notifications;\n})();\n\nNotifications = new constructor();\n\nTemplate.notifications.helpers({\n    notifications: function() {\n        return Notifications._getNotificationsCollection().find();\n    }\n});\n\nTemplate.notifications.rendered = function () {\n    this.firstNode._uihooks = {\n        insertElement: function (node, next) {\n\t\t\tvar settings = Notifications.settings;\n\t\t\t$(node)\n                .addClass('notificationHidden')\n                .insertBefore(next)\n                .fadeIn({duration: settings.animationSpeed})\n                .promise()\n                .done(function () {\n                    $(this).removeClass('notificationHidden');\n                });\n        },\n        removeElement: function (node) {\n\t\t\tvar settings = Notifications.settings;\n            $(node).animate(settings.hideAnimationProperties, {\n                duration: settings.animationSpeed,\n                complete: function () {\n                    $(node).remove();\n                }});\n        }\n    };\n};\n","\nTemplate.__checkName(\"notification\");\nTemplate[\"notification\"] = new Template(\"Template.notification\", (function() {\n  var view = this;\n  return HTML.LI({\n    \"class\": function() {\n      return [ \"notification \", Spacebars.mustache(view.lookup(\"notificationColor\"), view.lookup(\"type\")), \" \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"userCloseable\"));\n      }, function() {\n        return \"closeable\";\n      }) ];\n    }\n  }, \"\\n         \", HTML.DIV({\n    \"class\": \"title\"\n  }, Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"title\"));\n  })), \"\\n         \", HTML.DIV({\n    \"class\": \"message\"\n  }, Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"message\"));\n  })), \"\\n         \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"userCloseable\"));\n  }, function() {\n    return [ \"\\n                 \", HTML.DIV({\n      \"class\": \"closeButton\"\n    }, HTML.CharRef({\n      html: \"&times;\",\n      str: \"×\"\n    })), \"\\n         \" ];\n  }), \"\\n     \");\n}));\n","'use strict';\n\nTemplate.notification.rendered = function () {\n\t//TODO: Remove this when meteor issue #2369 gets fixed\n\t$(this.firstNode).data('_id', this.data._id);\n};\n\nTemplate.notification.helpers({\n    notificationColor: function(notificationType) {\n        return Notifications.getNotificationClass(notificationType);\n    }\n});\n\nTemplate.notification.events = {\n    'click': function () {\n        if (this.userCloseable || this.expires < new Date()) {\n            Notifications.remove(this._id);\n        }\n    }\n};"]}